/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IUsageRecorderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "adjustMeter"
      | "createMeter"
      | "getOrganizationMeters"
      | "increaseMeter"
      | "increaseMeterBatch"
      | "incrementMeter"
      | "incrementMeterBatch"
      | "isActiveOrgMeter"
      | "passUsages"
      | "processMeterPayment"
      | "setMeterActive"
      | "totalMeterCount"
      | "usageMeters"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MeterActiveSet"
      | "MeterCreated"
      | "MeterPaymentProcessed"
      | "MeterUsageSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "adjustMeter",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMeter",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizationMeters",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseMeter",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseMeterBatch",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementMeter",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "incrementMeterBatch",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isActiveOrgMeter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "passUsages",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "processMeterPayment",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMeterActive",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "totalMeterCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usageMeters",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "adjustMeter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMeter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizationMeters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseMeter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseMeterBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementMeter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementMeterBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isActiveOrgMeter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "passUsages", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "processMeterPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMeterActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalMeterCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usageMeters",
    data: BytesLike
  ): Result;
}

export namespace MeterActiveSetEvent {
  export type InputTuple = [
    organizationId: BigNumberish,
    meterId: BigNumberish,
    isActive: boolean
  ];
  export type OutputTuple = [
    organizationId: bigint,
    meterId: bigint,
    isActive: boolean
  ];
  export interface OutputObject {
    organizationId: bigint;
    meterId: bigint;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MeterCreatedEvent {
  export type InputTuple = [
    organizationId: BigNumberish,
    meterId: BigNumberish
  ];
  export type OutputTuple = [organizationId: bigint, meterId: bigint];
  export interface OutputObject {
    organizationId: bigint;
    meterId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MeterPaymentProcessedEvent {
  export type InputTuple = [
    organizationId: BigNumberish,
    meterId: BigNumberish,
    tokenId: BigNumberish,
    usage: BigNumberish
  ];
  export type OutputTuple = [
    organizationId: bigint,
    meterId: bigint,
    tokenId: bigint,
    usage: bigint
  ];
  export interface OutputObject {
    organizationId: bigint;
    meterId: bigint;
    tokenId: bigint;
    usage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MeterUsageSetEvent {
  export type InputTuple = [
    organizationId: BigNumberish,
    meterId: BigNumberish,
    tokenId: BigNumberish,
    usage: BigNumberish
  ];
  export type OutputTuple = [
    organizationId: bigint,
    meterId: bigint,
    tokenId: bigint,
    usage: bigint
  ];
  export interface OutputObject {
    organizationId: bigint;
    meterId: bigint;
    tokenId: bigint;
    usage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IUsageRecorder extends BaseContract {
  connect(runner?: ContractRunner | null): IUsageRecorder;
  waitForDeployment(): Promise<this>;

  interface: IUsageRecorderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  adjustMeter: TypedContractMethod<
    [meterId: BigNumberish, tokenId: BigNumberish, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  createMeter: TypedContractMethod<
    [organizationId: BigNumberish, aggregationMethod: BigNumberish],
    [void],
    "nonpayable"
  >;

  getOrganizationMeters: TypedContractMethod<
    [organizationId: BigNumberish],
    [bigint[]],
    "view"
  >;

  increaseMeter: TypedContractMethod<
    [meterId: BigNumberish, tokenId: BigNumberish, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseMeterBatch: TypedContractMethod<
    [meterId: BigNumberish, tokenIds: BigNumberish[], values: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  incrementMeter: TypedContractMethod<
    [meterId: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  incrementMeterBatch: TypedContractMethod<
    [meterId: BigNumberish, tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  isActiveOrgMeter: TypedContractMethod<
    [meterId: BigNumberish],
    [boolean],
    "view"
  >;

  passUsages: TypedContractMethod<
    [meterId: BigNumberish, tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  processMeterPayment: TypedContractMethod<
    [meterId: BigNumberish, tokenId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  setMeterActive: TypedContractMethod<
    [meterId: BigNumberish, isActive: boolean],
    [void],
    "nonpayable"
  >;

  totalMeterCount: TypedContractMethod<[], [bigint], "view">;

  usageMeters: TypedContractMethod<
    [meterId: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        orgId: bigint;
        aggregationMethod: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "adjustMeter"
  ): TypedContractMethod<
    [meterId: BigNumberish, tokenId: BigNumberish, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createMeter"
  ): TypedContractMethod<
    [organizationId: BigNumberish, aggregationMethod: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getOrganizationMeters"
  ): TypedContractMethod<[organizationId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "increaseMeter"
  ): TypedContractMethod<
    [meterId: BigNumberish, tokenId: BigNumberish, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseMeterBatch"
  ): TypedContractMethod<
    [meterId: BigNumberish, tokenIds: BigNumberish[], values: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "incrementMeter"
  ): TypedContractMethod<
    [meterId: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "incrementMeterBatch"
  ): TypedContractMethod<
    [meterId: BigNumberish, tokenIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isActiveOrgMeter"
  ): TypedContractMethod<[meterId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "passUsages"
  ): TypedContractMethod<
    [meterId: BigNumberish, tokenId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "processMeterPayment"
  ): TypedContractMethod<
    [meterId: BigNumberish, tokenId: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMeterActive"
  ): TypedContractMethod<
    [meterId: BigNumberish, isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalMeterCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usageMeters"
  ): TypedContractMethod<
    [meterId: BigNumberish],
    [
      [bigint, bigint, boolean] & {
        orgId: bigint;
        aggregationMethod: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "MeterActiveSet"
  ): TypedContractEvent<
    MeterActiveSetEvent.InputTuple,
    MeterActiveSetEvent.OutputTuple,
    MeterActiveSetEvent.OutputObject
  >;
  getEvent(
    key: "MeterCreated"
  ): TypedContractEvent<
    MeterCreatedEvent.InputTuple,
    MeterCreatedEvent.OutputTuple,
    MeterCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MeterPaymentProcessed"
  ): TypedContractEvent<
    MeterPaymentProcessedEvent.InputTuple,
    MeterPaymentProcessedEvent.OutputTuple,
    MeterPaymentProcessedEvent.OutputObject
  >;
  getEvent(
    key: "MeterUsageSet"
  ): TypedContractEvent<
    MeterUsageSetEvent.InputTuple,
    MeterUsageSetEvent.OutputTuple,
    MeterUsageSetEvent.OutputObject
  >;

  filters: {
    "MeterActiveSet(uint256,uint256,bool)": TypedContractEvent<
      MeterActiveSetEvent.InputTuple,
      MeterActiveSetEvent.OutputTuple,
      MeterActiveSetEvent.OutputObject
    >;
    MeterActiveSet: TypedContractEvent<
      MeterActiveSetEvent.InputTuple,
      MeterActiveSetEvent.OutputTuple,
      MeterActiveSetEvent.OutputObject
    >;

    "MeterCreated(uint256,uint256)": TypedContractEvent<
      MeterCreatedEvent.InputTuple,
      MeterCreatedEvent.OutputTuple,
      MeterCreatedEvent.OutputObject
    >;
    MeterCreated: TypedContractEvent<
      MeterCreatedEvent.InputTuple,
      MeterCreatedEvent.OutputTuple,
      MeterCreatedEvent.OutputObject
    >;

    "MeterPaymentProcessed(uint256,uint256,uint256,uint256)": TypedContractEvent<
      MeterPaymentProcessedEvent.InputTuple,
      MeterPaymentProcessedEvent.OutputTuple,
      MeterPaymentProcessedEvent.OutputObject
    >;
    MeterPaymentProcessed: TypedContractEvent<
      MeterPaymentProcessedEvent.InputTuple,
      MeterPaymentProcessedEvent.OutputTuple,
      MeterPaymentProcessedEvent.OutputObject
    >;

    "MeterUsageSet(uint256,uint256,uint256,uint256)": TypedContractEvent<
      MeterUsageSetEvent.InputTuple,
      MeterUsageSetEvent.OutputTuple,
      MeterUsageSetEvent.OutputObject
    >;
    MeterUsageSet: TypedContractEvent<
      MeterUsageSetEvent.InputTuple,
      MeterUsageSetEvent.OutputTuple,
      MeterUsageSetEvent.OutputObject
    >;
  };
}
