/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace MetadataUtils {
  export type MetadataStruct = {
    name: string;
    description: string;
    externalUrl: string;
    image: string;
    backgroundColor: string;
    animationUrl: string;
  };

  export type MetadataStructOutput = [
    name: string,
    description: string,
    externalUrl: string,
    image: string,
    backgroundColor: string,
    animationUrl: string
  ] & {
    name: string;
    description: string;
    externalUrl: string;
    image: string;
    backgroundColor: string;
    animationUrl: string;
  };
}

export interface IMetadataProviderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getCustomMetadata"
      | "getDefaultMetadata"
      | "setAttributeProvider"
      | "setCustomMetadata"
      | "setCustomMetadataField"
      | "setDefaultMetadata"
      | "setDefaultMetadataField"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AttributeProviderUpdated"
      | "CustomMetadataUpdated"
      | "DefaultMetadataUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getCustomMetadata",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAttributeProvider",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomMetadata",
    values: [BigNumberish, MetadataUtils.MetadataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomMetadataField",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultMetadata",
    values: [MetadataUtils.MetadataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setDefaultMetadataField",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCustomMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAttributeProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomMetadataField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDefaultMetadataField",
    data: BytesLike
  ): Result;
}

export namespace AttributeProviderUpdatedEvent {
  export type InputTuple = [attributeProvider: AddressLike];
  export type OutputTuple = [attributeProvider: string];
  export interface OutputObject {
    attributeProvider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CustomMetadataUpdatedEvent {
  export type InputTuple = [organizationId: BigNumberish];
  export type OutputTuple = [organizationId: bigint];
  export interface OutputObject {
    organizationId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultMetadataUpdatedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IMetadataProvider extends BaseContract {
  connect(runner?: ContractRunner | null): IMetadataProvider;
  waitForDeployment(): Promise<this>;

  interface: IMetadataProviderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getCustomMetadata: TypedContractMethod<
    [organizationId: BigNumberish],
    [MetadataUtils.MetadataStructOutput],
    "view"
  >;

  getDefaultMetadata: TypedContractMethod<
    [],
    [MetadataUtils.MetadataStructOutput],
    "view"
  >;

  setAttributeProvider: TypedContractMethod<
    [attributeProvider: AddressLike],
    [void],
    "nonpayable"
  >;

  setCustomMetadata: TypedContractMethod<
    [organizationId: BigNumberish, metadata: MetadataUtils.MetadataStruct],
    [void],
    "nonpayable"
  >;

  setCustomMetadataField: TypedContractMethod<
    [organizationId: BigNumberish, field: BigNumberish, value: string],
    [void],
    "nonpayable"
  >;

  setDefaultMetadata: TypedContractMethod<
    [metadata: MetadataUtils.MetadataStruct],
    [void],
    "nonpayable"
  >;

  setDefaultMetadataField: TypedContractMethod<
    [field: BigNumberish, value: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getCustomMetadata"
  ): TypedContractMethod<
    [organizationId: BigNumberish],
    [MetadataUtils.MetadataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDefaultMetadata"
  ): TypedContractMethod<[], [MetadataUtils.MetadataStructOutput], "view">;
  getFunction(
    nameOrSignature: "setAttributeProvider"
  ): TypedContractMethod<
    [attributeProvider: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCustomMetadata"
  ): TypedContractMethod<
    [organizationId: BigNumberish, metadata: MetadataUtils.MetadataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCustomMetadataField"
  ): TypedContractMethod<
    [organizationId: BigNumberish, field: BigNumberish, value: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultMetadata"
  ): TypedContractMethod<
    [metadata: MetadataUtils.MetadataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setDefaultMetadataField"
  ): TypedContractMethod<
    [field: BigNumberish, value: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AttributeProviderUpdated"
  ): TypedContractEvent<
    AttributeProviderUpdatedEvent.InputTuple,
    AttributeProviderUpdatedEvent.OutputTuple,
    AttributeProviderUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "CustomMetadataUpdated"
  ): TypedContractEvent<
    CustomMetadataUpdatedEvent.InputTuple,
    CustomMetadataUpdatedEvent.OutputTuple,
    CustomMetadataUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "DefaultMetadataUpdated"
  ): TypedContractEvent<
    DefaultMetadataUpdatedEvent.InputTuple,
    DefaultMetadataUpdatedEvent.OutputTuple,
    DefaultMetadataUpdatedEvent.OutputObject
  >;

  filters: {
    "AttributeProviderUpdated(address)": TypedContractEvent<
      AttributeProviderUpdatedEvent.InputTuple,
      AttributeProviderUpdatedEvent.OutputTuple,
      AttributeProviderUpdatedEvent.OutputObject
    >;
    AttributeProviderUpdated: TypedContractEvent<
      AttributeProviderUpdatedEvent.InputTuple,
      AttributeProviderUpdatedEvent.OutputTuple,
      AttributeProviderUpdatedEvent.OutputObject
    >;

    "CustomMetadataUpdated(uint256)": TypedContractEvent<
      CustomMetadataUpdatedEvent.InputTuple,
      CustomMetadataUpdatedEvent.OutputTuple,
      CustomMetadataUpdatedEvent.OutputObject
    >;
    CustomMetadataUpdated: TypedContractEvent<
      CustomMetadataUpdatedEvent.InputTuple,
      CustomMetadataUpdatedEvent.OutputTuple,
      CustomMetadataUpdatedEvent.OutputObject
    >;

    "DefaultMetadataUpdated()": TypedContractEvent<
      DefaultMetadataUpdatedEvent.InputTuple,
      DefaultMetadataUpdatedEvent.OutputTuple,
      DefaultMetadataUpdatedEvent.OutputObject
    >;
    DefaultMetadataUpdated: TypedContractEvent<
      DefaultMetadataUpdatedEvent.InputTuple,
      DefaultMetadataUpdatedEvent.OutputTuple,
      DefaultMetadataUpdatedEvent.OutputObject
    >;
  };
}
