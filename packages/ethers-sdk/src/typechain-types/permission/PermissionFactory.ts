/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IPermissionFactory {
  export type PermissionStruct = {
    id: BytesLike;
    name: string;
    description: string;
    isActive: boolean;
    createdAt: BigNumberish;
  };

  export type PermissionStructOutput = [
    id: string,
    name: string,
    description: string,
    isActive: boolean,
    createdAt: bigint
  ] & {
    id: string;
    name: string;
    description: string;
    isActive: boolean;
    createdAt: bigint;
  };
}

export interface PermissionFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "addDefaultPermission"
      | "createPermission"
      | "getAllPermissionIds"
      | "getAllPermissions"
      | "getDefaultPermissionIds"
      | "getPermission"
      | "getPermissionBatch"
      | "getPermissionByName"
      | "getPermissionByNameBatch"
      | "getPermissionIdByName"
      | "isDefaultPermission"
      | "isPermissionActive"
      | "isPermissionActiveBatch"
      | "isPermissionActiveByName"
      | "isPermissionActiveByNameBatch"
      | "owner"
      | "pendingOwner"
      | "removeDefaultPermission"
      | "renounceOwnership"
      | "setPermissionActive"
      | "setPermissionDescription"
      | "supportsInterface"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DefaultPermissionAdded"
      | "DefaultPermissionRemoved"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "PermissionActivation"
      | "PermissionCreated"
      | "PermissionDescriptionUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDefaultPermission",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createPermission",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPermissionIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPermissions",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDefaultPermissionIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPermission",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionBatch",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionByNameBatch",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPermissionIdByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isDefaultPermission",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPermissionActive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isPermissionActiveBatch",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isPermissionActiveByName",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isPermissionActiveByNameBatch",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeDefaultPermission",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionActive",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPermissionDescription",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDefaultPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPermissionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllPermissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDefaultPermissionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionByNameBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPermissionIdByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDefaultPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPermissionActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPermissionActiveBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPermissionActiveByName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPermissionActiveByNameBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDefaultPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPermissionDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace DefaultPermissionAddedEvent {
  export type InputTuple = [permissionId: BytesLike];
  export type OutputTuple = [permissionId: string];
  export interface OutputObject {
    permissionId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultPermissionRemovedEvent {
  export type InputTuple = [permissionId: BytesLike];
  export type OutputTuple = [permissionId: string];
  export interface OutputObject {
    permissionId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionActivationEvent {
  export type InputTuple = [permissionId: BytesLike, isActive: boolean];
  export type OutputTuple = [permissionId: string, isActive: boolean];
  export interface OutputObject {
    permissionId: string;
    isActive: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionCreatedEvent {
  export type InputTuple = [
    permissionId: BytesLike,
    name: string,
    description: string,
    isDefault: boolean
  ];
  export type OutputTuple = [
    permissionId: string,
    name: string,
    description: string,
    isDefault: boolean
  ];
  export interface OutputObject {
    permissionId: string;
    name: string;
    description: string;
    isDefault: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PermissionDescriptionUpdatedEvent {
  export type InputTuple = [permissionId: BytesLike, description: string];
  export type OutputTuple = [permissionId: string, description: string];
  export interface OutputObject {
    permissionId: string;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PermissionFactory extends BaseContract {
  connect(runner?: ContractRunner | null): PermissionFactory;
  waitForDeployment(): Promise<this>;

  interface: PermissionFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  addDefaultPermission: TypedContractMethod<
    [_permissionId: BytesLike],
    [void],
    "nonpayable"
  >;

  createPermission: TypedContractMethod<
    [_name: string, _description: string, _isDefault: boolean],
    [void],
    "nonpayable"
  >;

  getAllPermissionIds: TypedContractMethod<[], [string[]], "view">;

  getAllPermissions: TypedContractMethod<
    [],
    [IPermissionFactory.PermissionStructOutput[]],
    "view"
  >;

  getDefaultPermissionIds: TypedContractMethod<[], [string[]], "view">;

  getPermission: TypedContractMethod<
    [_permissionId: BytesLike],
    [IPermissionFactory.PermissionStructOutput],
    "view"
  >;

  getPermissionBatch: TypedContractMethod<
    [_permissionIds: BytesLike[]],
    [IPermissionFactory.PermissionStructOutput[]],
    "view"
  >;

  getPermissionByName: TypedContractMethod<
    [_name: string],
    [IPermissionFactory.PermissionStructOutput],
    "view"
  >;

  getPermissionByNameBatch: TypedContractMethod<
    [_names: string[]],
    [IPermissionFactory.PermissionStructOutput[]],
    "view"
  >;

  getPermissionIdByName: TypedContractMethod<[_name: string], [string], "view">;

  isDefaultPermission: TypedContractMethod<
    [_permissionId: BytesLike],
    [boolean],
    "view"
  >;

  isPermissionActive: TypedContractMethod<
    [_permissionId: BytesLike],
    [boolean],
    "view"
  >;

  isPermissionActiveBatch: TypedContractMethod<
    [_permissionIds: BytesLike[]],
    [boolean],
    "view"
  >;

  isPermissionActiveByName: TypedContractMethod<
    [_name: string],
    [boolean],
    "view"
  >;

  isPermissionActiveByNameBatch: TypedContractMethod<
    [_names: string[]],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  removeDefaultPermission: TypedContractMethod<
    [_permissionId: BytesLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setPermissionActive: TypedContractMethod<
    [_permissionId: BytesLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;

  setPermissionDescription: TypedContractMethod<
    [_permissionId: BytesLike, _description: string],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addDefaultPermission"
  ): TypedContractMethod<[_permissionId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createPermission"
  ): TypedContractMethod<
    [_name: string, _description: string, _isDefault: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllPermissionIds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getAllPermissions"
  ): TypedContractMethod<
    [],
    [IPermissionFactory.PermissionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDefaultPermissionIds"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getPermission"
  ): TypedContractMethod<
    [_permissionId: BytesLike],
    [IPermissionFactory.PermissionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPermissionBatch"
  ): TypedContractMethod<
    [_permissionIds: BytesLike[]],
    [IPermissionFactory.PermissionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPermissionByName"
  ): TypedContractMethod<
    [_name: string],
    [IPermissionFactory.PermissionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPermissionByNameBatch"
  ): TypedContractMethod<
    [_names: string[]],
    [IPermissionFactory.PermissionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPermissionIdByName"
  ): TypedContractMethod<[_name: string], [string], "view">;
  getFunction(
    nameOrSignature: "isDefaultPermission"
  ): TypedContractMethod<[_permissionId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPermissionActive"
  ): TypedContractMethod<[_permissionId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPermissionActiveBatch"
  ): TypedContractMethod<[_permissionIds: BytesLike[]], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPermissionActiveByName"
  ): TypedContractMethod<[_name: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isPermissionActiveByNameBatch"
  ): TypedContractMethod<[_names: string[]], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeDefaultPermission"
  ): TypedContractMethod<[_permissionId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPermissionActive"
  ): TypedContractMethod<
    [_permissionId: BytesLike, _isActive: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPermissionDescription"
  ): TypedContractMethod<
    [_permissionId: BytesLike, _description: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "DefaultPermissionAdded"
  ): TypedContractEvent<
    DefaultPermissionAddedEvent.InputTuple,
    DefaultPermissionAddedEvent.OutputTuple,
    DefaultPermissionAddedEvent.OutputObject
  >;
  getEvent(
    key: "DefaultPermissionRemoved"
  ): TypedContractEvent<
    DefaultPermissionRemovedEvent.InputTuple,
    DefaultPermissionRemovedEvent.OutputTuple,
    DefaultPermissionRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PermissionActivation"
  ): TypedContractEvent<
    PermissionActivationEvent.InputTuple,
    PermissionActivationEvent.OutputTuple,
    PermissionActivationEvent.OutputObject
  >;
  getEvent(
    key: "PermissionCreated"
  ): TypedContractEvent<
    PermissionCreatedEvent.InputTuple,
    PermissionCreatedEvent.OutputTuple,
    PermissionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PermissionDescriptionUpdated"
  ): TypedContractEvent<
    PermissionDescriptionUpdatedEvent.InputTuple,
    PermissionDescriptionUpdatedEvent.OutputTuple,
    PermissionDescriptionUpdatedEvent.OutputObject
  >;

  filters: {
    "DefaultPermissionAdded(bytes32)": TypedContractEvent<
      DefaultPermissionAddedEvent.InputTuple,
      DefaultPermissionAddedEvent.OutputTuple,
      DefaultPermissionAddedEvent.OutputObject
    >;
    DefaultPermissionAdded: TypedContractEvent<
      DefaultPermissionAddedEvent.InputTuple,
      DefaultPermissionAddedEvent.OutputTuple,
      DefaultPermissionAddedEvent.OutputObject
    >;

    "DefaultPermissionRemoved(bytes32)": TypedContractEvent<
      DefaultPermissionRemovedEvent.InputTuple,
      DefaultPermissionRemovedEvent.OutputTuple,
      DefaultPermissionRemovedEvent.OutputObject
    >;
    DefaultPermissionRemoved: TypedContractEvent<
      DefaultPermissionRemovedEvent.InputTuple,
      DefaultPermissionRemovedEvent.OutputTuple,
      DefaultPermissionRemovedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PermissionActivation(bytes32,bool)": TypedContractEvent<
      PermissionActivationEvent.InputTuple,
      PermissionActivationEvent.OutputTuple,
      PermissionActivationEvent.OutputObject
    >;
    PermissionActivation: TypedContractEvent<
      PermissionActivationEvent.InputTuple,
      PermissionActivationEvent.OutputTuple,
      PermissionActivationEvent.OutputObject
    >;

    "PermissionCreated(bytes32,string,string,bool)": TypedContractEvent<
      PermissionCreatedEvent.InputTuple,
      PermissionCreatedEvent.OutputTuple,
      PermissionCreatedEvent.OutputObject
    >;
    PermissionCreated: TypedContractEvent<
      PermissionCreatedEvent.InputTuple,
      PermissionCreatedEvent.OutputTuple,
      PermissionCreatedEvent.OutputObject
    >;

    "PermissionDescriptionUpdated(bytes32,string)": TypedContractEvent<
      PermissionDescriptionUpdatedEvent.InputTuple,
      PermissionDescriptionUpdatedEvent.OutputTuple,
      PermissionDescriptionUpdatedEvent.OutputObject
    >;
    PermissionDescriptionUpdated: TypedContractEvent<
      PermissionDescriptionUpdatedEvent.InputTuple,
      PermissionDescriptionUpdatedEvent.OutputTuple,
      PermissionDescriptionUpdatedEvent.OutputObject
    >;
  };
}
