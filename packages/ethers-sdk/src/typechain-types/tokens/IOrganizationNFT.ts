/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface IOrganizationNFTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "mint"
      | "mintOpen"
      | "setMintOpen"
      | "setWhitelisted"
      | "totalSupply"
      | "whitelisted"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "MintOpenSet" | "WhitelistedSet"
  ): EventFragment;

  encodeFunctionData(functionFragment: "mint", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "mintOpen", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setMintOpen",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelisted",
    values: [AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "whitelisted",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintOpen", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMintOpen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelisted",
    data: BytesLike
  ): Result;
}

export namespace MintOpenSetEvent {
  export type InputTuple = [mintOpen: boolean];
  export type OutputTuple = [mintOpen: boolean];
  export interface OutputObject {
    mintOpen: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistedSetEvent {
  export type InputTuple = [account: AddressLike, isWhitelisted: boolean];
  export type OutputTuple = [account: string, isWhitelisted: boolean];
  export interface OutputObject {
    account: string;
    isWhitelisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IOrganizationNFT extends BaseContract {
  connect(runner?: ContractRunner | null): IOrganizationNFT;
  waitForDeployment(): Promise<this>;

  interface: IOrganizationNFTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  mint: TypedContractMethod<[to: AddressLike], [void], "nonpayable">;

  mintOpen: TypedContractMethod<[], [boolean], "view">;

  setMintOpen: TypedContractMethod<[_mintOpen: boolean], [void], "nonpayable">;

  setWhitelisted: TypedContractMethod<
    [_addresses: AddressLike[], _isWhitelisted: boolean[]],
    [void],
    "nonpayable"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  whitelisted: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mintOpen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "setMintOpen"
  ): TypedContractMethod<[_mintOpen: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhitelisted"
  ): TypedContractMethod<
    [_addresses: AddressLike[], _isWhitelisted: boolean[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "whitelisted"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;

  getEvent(
    key: "MintOpenSet"
  ): TypedContractEvent<
    MintOpenSetEvent.InputTuple,
    MintOpenSetEvent.OutputTuple,
    MintOpenSetEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistedSet"
  ): TypedContractEvent<
    WhitelistedSetEvent.InputTuple,
    WhitelistedSetEvent.OutputTuple,
    WhitelistedSetEvent.OutputObject
  >;

  filters: {
    "MintOpenSet(bool)": TypedContractEvent<
      MintOpenSetEvent.InputTuple,
      MintOpenSetEvent.OutputTuple,
      MintOpenSetEvent.OutputObject
    >;
    MintOpenSet: TypedContractEvent<
      MintOpenSetEvent.InputTuple,
      MintOpenSetEvent.OutputTuple,
      MintOpenSetEvent.OutputObject
    >;

    "WhitelistedSet(address,bool)": TypedContractEvent<
      WhitelistedSetEvent.InputTuple,
      WhitelistedSetEvent.OutputTuple,
      WhitelistedSetEvent.OutputObject
    >;
    WhitelistedSet: TypedContractEvent<
      WhitelistedSetEvent.InputTuple,
      WhitelistedSetEvent.OutputTuple,
      WhitelistedSetEvent.OutputObject
    >;
  };
}
