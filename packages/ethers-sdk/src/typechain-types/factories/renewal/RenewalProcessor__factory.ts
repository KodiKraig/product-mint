/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  RenewalProcessor,
  RenewalProcessorInterface,
} from "../../renewal/RenewalProcessor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_registry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ReentrancyGuardReentrantCall",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "orgId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "productPassId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "productId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum IRenewalProcessor.RenewalStatus",
        name: "status",
        type: "uint8",
      },
    ],
    name: "RenewalProcessed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_passId",
        type: "uint256",
      },
    ],
    name: "getAllPassRenewalStatus",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "passId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "productId",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "orgId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pricingId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "startDate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "endDate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "timeRemaining",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isCancelled",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isPaused",
                type: "bool",
              },
            ],
            internalType: "struct ISubscriptionEscrow.Subscription",
            name: "subscription",
            type: "tuple",
          },
          {
            internalType: "enum ISubscriptionEscrow.SubscriptionStatus",
            name: "subStatus",
            type: "uint8",
          },
          {
            internalType: "enum IRenewalProcessor.RenewalStatus",
            name: "renewalStatus",
            type: "uint8",
          },
        ],
        internalType: "struct IRenewalProcessor.PassRenewalStatus[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_startPassId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_endPassId",
        type: "uint256",
      },
    ],
    name: "getAllPassRenewalStatusBatch",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "passId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "productId",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "orgId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pricingId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "startDate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "endDate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "timeRemaining",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isCancelled",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isPaused",
                type: "bool",
              },
            ],
            internalType: "struct ISubscriptionEscrow.Subscription",
            name: "subscription",
            type: "tuple",
          },
          {
            internalType: "enum ISubscriptionEscrow.SubscriptionStatus",
            name: "subStatus",
            type: "uint8",
          },
          {
            internalType: "enum IRenewalProcessor.RenewalStatus",
            name: "renewalStatus",
            type: "uint8",
          },
        ],
        internalType: "struct IRenewalProcessor.PassRenewalStatus[][]",
        name: "passRenewalStatus",
        type: "tuple[][]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_passId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_productId",
        type: "uint256",
      },
    ],
    name: "getSingleProductRenewalStatus",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "passId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "productId",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "orgId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "pricingId",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "startDate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "endDate",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "timeRemaining",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isCancelled",
                type: "bool",
              },
              {
                internalType: "bool",
                name: "isPaused",
                type: "bool",
              },
            ],
            internalType: "struct ISubscriptionEscrow.Subscription",
            name: "subscription",
            type: "tuple",
          },
          {
            internalType: "enum ISubscriptionEscrow.SubscriptionStatus",
            name: "subStatus",
            type: "uint8",
          },
          {
            internalType: "enum IRenewalProcessor.RenewalStatus",
            name: "renewalStatus",
            type: "uint8",
          },
        ],
        internalType: "struct IRenewalProcessor.PassRenewalStatus",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_passId",
        type: "uint256",
      },
    ],
    name: "processAllPassRenewal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_startPassId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_endPassId",
        type: "uint256",
      },
    ],
    name: "processAllPassRenewalBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_passId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_productId",
        type: "uint256",
      },
    ],
    name: "processSingleProductRenewal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract IContractRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516112c83803806112c883398101604081905261002f91610059565b600080546001600160a01b0319166001600160a01b03929092169190911790556001603355610089565b60006020828403121561006b57600080fd5b81516001600160a01b038116811461008257600080fd5b9392505050565b611230806100986000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80639552a1e81161005b5780639552a1e814610108578063a02b046e14610128578063b9dfd4861461013b578063e42230211461015b57600080fd5b806301ffc9a71461008d5780633506825b146100b55780637b103999146100ca5780638ea1b2da146100f5575b600080fd5b6100a061009b366004610d5f565b61017b565b60405190151581526020015b60405180910390f35b6100c86100c3366004610d89565b6101b2565b005b6000546100dd906001600160a01b031681565b6040516001600160a01b0390911681526020016100ac565b6100c8610103366004610d89565b6101fb565b61011b610116366004610d89565b610226565b6040516100ac9190610e68565b6100c8610136366004610e77565b61024a565b61014e610149366004610e77565b610273565b6040516100ac9190610e90565b61016e610169366004610d89565b61028f565b6040516100ac9190610edf565b60006001600160e01b031982166306991b8d60e51b14806101ac57506001600160e01b031982166301ffc9a760e01b145b92915050565b81816101be8282610354565b6101c66103ab565b835b8381116101ea576101d8816103d5565b806101e281610f8a565b9150506101c8565b506101f56001603355565b50505050565b81610205816104f8565b61020d6103ab565b610217838361067f565b6102216001603355565b505050565b61022e610cef565b82610238816104f8565b61024284846109c8565b949350505050565b80610254816104f8565b61025c6103ab565b610265826103d5565b61026f6001603355565b5050565b60608161027f816104f8565b61028883610b5a565b9392505050565b6060828261029d8282610354565b6102a78585610fa3565b6102b2906001610fb6565b67ffffffffffffffff8111156102ca576102ca610fc9565b6040519080825280602002602001820160405280156102fd57816020015b60608152602001906001900390816102e85790505b509250845b84811161034b5761031281610b5a565b8461031d8884610fa3565b8151811061032d5761032d610fdf565b6020026020010181905250808061034390610f8a565b915050610302565b50505092915050565b808211156103995760405162461bcd60e51b815260206004820152600d60248201526c092dcecc2d8d2c840d2dcc8caf609b1b60448201526064015b60405180910390fd5b6103a2826104f8565b61026f816104f8565b6002603354036103ce57604051633ee5aeb560e01b815260040160405180910390fd5b6002603355565b60008060009054906101000a90046001600160a01b03166001600160a01b031663fc9354fa6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190610ff5565b6001600160a01b03166348f3c0e3836040518263ffffffff1660e01b815260040161047a91815260200190565b600060405180830381865afa158015610497573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104bf9190810190611078565b905060005b8151811015610221576104f0838383815181106104e3576104e3610fdf565b602002602001015161067f565b6001016104c4565b600081116105485760405162461bcd60e51b815260206004820152601e60248201527f50617373204944206d7573742062652067726561746572207468616e203000006044820152606401610390565b60008054906101000a90046001600160a01b03166001600160a01b0316635cbf60cc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bd9190610ff5565b6001600160a01b03166346dab4956040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061e919061111e565b81111561067c5760405162461bcd60e51b815260206004820152602660248201527f50617373204944206d757374206265206c657373207468616e20746f74616c20604482015265737570706c7960d01b6064820152608401610390565b50565b6000805460408051637e49aa7d60e11b8152905183926001600160a01b03169163fc9354fa9160048083019260209291908290030181865afa1580156106c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ed9190610ff5565b60405163a461efb960e01b815260048101869052602481018590526001600160a01b03919091169063a461efb99060440161010060405180830381865afa15801561073c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610760919061115b565b5090506107708160600151421190565b61077d576002915061088d565b8060a0015115610790576003915061088d565b8060c00151156107a3576004915061088d565b60008054906101000a90046001600160a01b03166001600160a01b0316635cbf60cc6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108189190610ff5565b604051633bc8fa8160e11b81526004810186905260248101859052600060448201526001600160a01b039190911690637791f50290606401600060405180830381600087803b15801561086a57600080fd5b505af192505050801561087b575060015b610888576001915061088d565b600091505b60028260058111156108a1576108a1610dab565b146101f557828460008054906101000a90046001600160a01b03166001600160a01b031663eebc3a696040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d9190610ff5565b6001600160a01b03166382f205dd876040518263ffffffff1660e01b815260040161094a91815260200190565b602060405180830381865afa158015610967573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098b919061111e565b7f98309b18044647fd2d369a17c729e099f429fdc51683b0c21cdadd14f48f26ae856040516109ba91906111ec565b60405180910390a450505050565b6109d0610cef565b6000805460408051637e49aa7d60e11b8152905183926001600160a01b03169163fc9354fa9160048083019260209291908290030181865afa158015610a1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3e9190610ff5565b60405163a461efb960e01b815260048101879052602481018690526001600160a01b03919091169063a461efb99060440161010060405180830381865afa158015610a8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab1919061115b565b8685526020850186905260408501829052909250905060608301816003811115610add57610add610dab565b90816003811115610af057610af0610dab565b90525060608201514211610b20576080830160025b90816005811115610b1857610b18610dab565b905250610b52565b8160a0015115610b3557608083016003610b05565b8160c0015115610b4a57608083016004610b05565b600560808401525b505092915050565b6000805460408051637e49aa7d60e11b81529051606093926001600160a01b03169163fc9354fa9160048083019260209291908290030181865afa158015610ba6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bca9190610ff5565b6001600160a01b03166348f3c0e3846040518263ffffffff1660e01b8152600401610bf791815260200190565b600060405180830381865afa158015610c14573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c3c9190810190611078565b9050805167ffffffffffffffff811115610c5857610c58610fc9565b604051908082528060200260200182016040528015610c9157816020015b610c7e610cef565b815260200190600190039081610c765790505b50915060005b8151811015610ce857610cc384838381518110610cb657610cb6610fdf565b60200260200101516109c8565b838281518110610cd557610cd5610fdf565b6020908102919091010152600101610c97565b5050919050565b6040518060a001604052806000815260200160008152602001610d4c6040518060e0016040528060008152602001600081526020016000815260200160008152602001600081526020016000151581526020016000151581525090565b8152602001600081526020016000905290565b600060208284031215610d7157600080fd5b81356001600160e01b03198116811461028857600080fd5b60008060408385031215610d9c57600080fd5b50508035926020909101359150565b634e487b7160e01b600052602160045260246000fd5b60048110610dd157610dd1610dab565b9052565b60068110610dd157610dd1610dab565b80518252602081015160208301526040810151805160408401526020810151606084015260408101516080840152606081015160a0840152608081015160c084015260a0810151151560e084015260c08101511515610100840152506060810151610e54610120840182610dc1565b506080810151610221610140840182610dd5565b61016081016101ac8284610de5565b600060208284031215610e8957600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610ed357610ebf838551610de5565b928401926101609290920191600101610eac565b50909695505050505050565b6000602080830181845280855180835260408601915060408160051b87010192508387016000805b83811015610f6657888603603f19018552825180518088529088019088880190845b81811015610f5057610f3c838551610de5565b928a01926101609290920191600101610f29565b5090975050509386019391860191600101610f07565b509398975050505050505050565b634e487b7160e01b600052601160045260246000fd5b600060018201610f9c57610f9c610f74565b5060010190565b818103818111156101ac576101ac610f74565b808201808211156101ac576101ac610f74565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60006020828403121561100757600080fd5b81516001600160a01b038116811461028857600080fd5b60405160e0810167ffffffffffffffff8111828210171561104157611041610fc9565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561107057611070610fc9565b604052919050565b6000602080838503121561108b57600080fd5b825167ffffffffffffffff808211156110a357600080fd5b818501915085601f8301126110b757600080fd5b8151818111156110c9576110c9610fc9565b8060051b91506110da848301611047565b81815291830184019184810190888411156110f457600080fd5b938501935b83851015611112578451825293850193908501906110f9565b98975050505050505050565b60006020828403121561113057600080fd5b5051919050565b8051801515811461114757600080fd5b919050565b80516004811061114757600080fd5b60008082840361010081121561117057600080fd5b60e081121561117e57600080fd5b5061118761101e565b83518152602084015160208201526040840151604082015260608401516060820152608084015160808201526111bf60a08501611137565b60a08201526111d060c08501611137565b60c082015291506111e360e0840161114c565b90509250929050565b602081016101ac8284610dd556fea2646970667358221220d43cbb461f4bb9f824f370ed5730ecafcca784bdfa259e2767e696419a80521264736f6c63430008180033";

type RenewalProcessorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RenewalProcessorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RenewalProcessor__factory extends ContractFactory {
  constructor(...args: RenewalProcessorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _registry: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_registry, overrides || {});
  }
  override deploy(
    _registry: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_registry, overrides || {}) as Promise<
      RenewalProcessor & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RenewalProcessor__factory {
    return super.connect(runner) as RenewalProcessor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RenewalProcessorInterface {
    return new Interface(_abi) as RenewalProcessorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RenewalProcessor {
    return new Contract(address, _abi, runner) as unknown as RenewalProcessor;
  }
}
