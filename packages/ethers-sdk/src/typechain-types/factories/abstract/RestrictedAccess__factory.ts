/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  RestrictedAccess,
  RestrictedAccessInterface,
} from "../../abstract/RestrictedAccess";

const _abi = [
  {
    inputs: [],
    name: "InvalidRestrictedAccessInput",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "orgId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "accessId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "passOwner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "restricted",
        type: "bool",
      },
    ],
    name: "RestrictedAccessUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "orgId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "passOwner",
        type: "address",
      },
    ],
    name: "getRestrictedAccess",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "orgId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "passOwner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "accessId",
        type: "uint256",
      },
    ],
    name: "hasRestrictedAccess",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class RestrictedAccess__factory {
  static readonly abi = _abi;
  static createInterface(): RestrictedAccessInterface {
    return new Interface(_abi) as RestrictedAccessInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RestrictedAccess {
    return new Contract(address, _abi, runner) as unknown as RestrictedAccess;
  }
}
