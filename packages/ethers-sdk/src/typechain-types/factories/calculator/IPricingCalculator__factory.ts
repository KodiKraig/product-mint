/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IPricingCalculator,
  IPricingCalculatorInterface,
} from "../../calculator/IPricingCalculator";

const _abi = [
  {
    inputs: [],
    name: "InvalidChargeStyle",
    type: "error",
  },
  {
    inputs: [],
    name: "TieredChargeStyleInconsistency",
    type: "error",
  },
  {
    inputs: [],
    name: "UnitQuantityIsTheSame",
    type: "error",
  },
  {
    inputs: [],
    name: "UsageBasedChargeStyleInconsistency",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "oldPricingId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newPricingId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentStartDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentEndDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
    ],
    name: "getChangeSubscriptionCost",
    outputs: [
      {
        internalType: "uint256",
        name: "newEndDate",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pricingId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentStartDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentEndDate",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "oldQuantity",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newQuantity",
        type: "uint256",
      },
    ],
    name: "getChangeUnitQuantityCost",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "organizationId",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "productPassOwner",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "productIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "pricingIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "quantities",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "discountIds",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "couponId",
            type: "uint256",
          },
        ],
        internalType: "struct IPricingCalculator.CheckoutTotalCostParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "getCheckoutTotalCost",
    outputs: [
      {
        components: [
          {
            internalType: "uint256[]",
            name: "pricingIds",
            type: "uint256[]",
          },
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256[]",
            name: "costs",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "couponCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "couponDiscount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "couponSavings",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "permanentCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "permanentDiscount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "permanentSavings",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "subTotalCost",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "checkoutTotalCost",
            type: "uint256",
          },
        ],
        internalType: "struct IPricingCalculator.CheckoutTotalCost",
        name: "checkout",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "pricingIds",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "quantities",
        type: "uint256[]",
      },
    ],
    name: "getInitialPurchaseCost",
    outputs: [
      {
        internalType: "uint256",
        name: "cost",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "pricingId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
    ],
    name: "getPricingTotalCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum PricingUtils.ChargeStyle",
        name: "chargeStyle",
        type: "uint8",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "lowerBound",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "upperBound",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pricePerUnit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "priceFlatRate",
            type: "uint256",
          },
        ],
        internalType: "struct PricingUtils.PricingTier[]",
        name: "tiers",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "flatPrice",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
    ],
    name: "getTotalCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "lowerBound",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "upperBound",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pricePerUnit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "priceFlatRate",
            type: "uint256",
          },
        ],
        internalType: "struct PricingUtils.PricingTier[]",
        name: "tiers",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
    ],
    name: "totalGraduatedCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "lowerBound",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "upperBound",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "pricePerUnit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "priceFlatRate",
            type: "uint256",
          },
        ],
        internalType: "struct PricingUtils.PricingTier[]",
        name: "tiers",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "quantity",
        type: "uint256",
      },
    ],
    name: "totalVolumeCost",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

export class IPricingCalculator__factory {
  static readonly abi = _abi;
  static createInterface(): IPricingCalculatorInterface {
    return new Interface(_abi) as IPricingCalculatorInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IPricingCalculator {
    return new Contract(address, _abi, runner) as unknown as IPricingCalculator;
  }
}
