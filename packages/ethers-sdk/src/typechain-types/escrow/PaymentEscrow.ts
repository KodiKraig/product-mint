/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PaymentEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "FEE_DENOMINATOR"
      | "FEE_ENABLED_ROLE"
      | "FEE_EXEMPT_ROLE"
      | "FEE_SETTER_ROLE"
      | "FEE_WITHDRAW_ROLE"
      | "REVOKE_CHARGE_ROLE"
      | "WHITELIST_ROLE"
      | "calculateFee"
      | "exoticFee"
      | "feeExempt"
      | "feeReducer"
      | "fees"
      | "getFeeBalance"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isFeeEnabled"
      | "orgBalances"
      | "registry"
      | "renounceRole"
      | "restoreOrgChargeAbility"
      | "revokeOrgChargeAbility"
      | "revokeRole"
      | "revokedOrgs"
      | "setExoticFee"
      | "setFee"
      | "setFeeEnabled"
      | "setFeeExempt"
      | "setFeeReducer"
      | "setWhitelistedToken"
      | "supportsInterface"
      | "totalBalances"
      | "transferDirect"
      | "whitelistedTokens"
      | "withdrawFee"
      | "withdrawOrgBalance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExoticFeeSet"
      | "FeeEnabled"
      | "FeeExemptSet"
      | "FeeReducerSet"
      | "FeeSet"
      | "FeeWithdraw"
      | "OrgBalanceWithdrawn"
      | "OrgChargeAbilityUpdate"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TransferAmount"
      | "WhitelistedTokenSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_ENABLED_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_EXEMPT_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_SETTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FEE_WITHDRAW_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REVOKE_CHARGE_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WHITELIST_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateFee",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "exoticFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeExempt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeReducer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fees", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getFeeBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isFeeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orgBalances",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "restoreOrgChargeAbility",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeOrgChargeAbility",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokedOrgs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExoticFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeExempt",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReducer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistedToken",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferDirect",
    values: [BigNumberish, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistedTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOrgBalance",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_ENABLED_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_EXEMPT_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_SETTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FEE_WITHDRAW_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REVOKE_CHARGE_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WHITELIST_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exoticFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeExempt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeReducer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFeeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orgBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "restoreOrgChargeAbility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeOrgChargeAbility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokedOrgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExoticFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeExempt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReducer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferDirect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOrgBalance",
    data: BytesLike
  ): Result;
}

export namespace ExoticFeeSetEvent {
  export type InputTuple = [fee: BigNumberish];
  export type OutputTuple = [fee: bigint];
  export interface OutputObject {
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeEnabledEvent {
  export type InputTuple = [isEnabled: boolean];
  export type OutputTuple = [isEnabled: boolean];
  export interface OutputObject {
    isEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeExemptSetEvent {
  export type InputTuple = [orgId: BigNumberish, isExempt: boolean];
  export type OutputTuple = [orgId: bigint, isExempt: boolean];
  export interface OutputObject {
    orgId: bigint;
    isExempt: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeReducerSetEvent {
  export type InputTuple = [feeReducer: AddressLike];
  export type OutputTuple = [feeReducer: string];
  export interface OutputObject {
    feeReducer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeSetEvent {
  export type InputTuple = [token: AddressLike, newFee: BigNumberish];
  export type OutputTuple = [token: string, newFee: bigint];
  export interface OutputObject {
    token: string;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeWithdrawEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrgBalanceWithdrawnEvent {
  export type InputTuple = [
    orgId: BigNumberish,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [orgId: bigint, token: string, amount: bigint];
  export interface OutputObject {
    orgId: bigint;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrgChargeAbilityUpdateEvent {
  export type InputTuple = [orgId: BigNumberish, isRevoked: boolean];
  export type OutputTuple = [orgId: bigint, isRevoked: boolean];
  export interface OutputObject {
    orgId: bigint;
    isRevoked: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferAmountEvent {
  export type InputTuple = [
    orgId: BigNumberish,
    from: AddressLike,
    token: AddressLike,
    totalAmount: BigNumberish,
    orgAmount: BigNumberish
  ];
  export type OutputTuple = [
    orgId: bigint,
    from: string,
    token: string,
    totalAmount: bigint,
    orgAmount: bigint
  ];
  export interface OutputObject {
    orgId: bigint;
    from: string;
    token: string;
    totalAmount: bigint;
    orgAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistedTokenSetEvent {
  export type InputTuple = [token: AddressLike, isWhitelisted: boolean];
  export type OutputTuple = [token: string, isWhitelisted: boolean];
  export interface OutputObject {
    token: string;
    isWhitelisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PaymentEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): PaymentEscrow;
  waitForDeployment(): Promise<this>;

  interface: PaymentEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  FEE_ENABLED_ROLE: TypedContractMethod<[], [string], "view">;

  FEE_EXEMPT_ROLE: TypedContractMethod<[], [string], "view">;

  FEE_SETTER_ROLE: TypedContractMethod<[], [string], "view">;

  FEE_WITHDRAW_ROLE: TypedContractMethod<[], [string], "view">;

  REVOKE_CHARGE_ROLE: TypedContractMethod<[], [string], "view">;

  WHITELIST_ROLE: TypedContractMethod<[], [string], "view">;

  calculateFee: TypedContractMethod<
    [orgId: BigNumberish, token: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  exoticFee: TypedContractMethod<[], [bigint], "view">;

  feeExempt: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  feeReducer: TypedContractMethod<[], [string], "view">;

  fees: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFeeBalance: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isFeeEnabled: TypedContractMethod<[], [boolean], "view">;

  orgBalances: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  restoreOrgChargeAbility: TypedContractMethod<
    [orgId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeOrgChargeAbility: TypedContractMethod<
    [orgId: BigNumberish],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokedOrgs: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  setExoticFee: TypedContractMethod<
    [newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFee: TypedContractMethod<
    [token: AddressLike, newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeEnabled: TypedContractMethod<
    [_isFeeEnabled: boolean],
    [void],
    "nonpayable"
  >;

  setFeeExempt: TypedContractMethod<
    [orgId: BigNumberish, isExempt: boolean],
    [void],
    "nonpayable"
  >;

  setFeeReducer: TypedContractMethod<
    [_feeReducer: AddressLike],
    [void],
    "nonpayable"
  >;

  setWhitelistedToken: TypedContractMethod<
    [token: AddressLike, isWhitelisted: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  transferDirect: TypedContractMethod<
    [
      orgId: BigNumberish,
      from: AddressLike,
      token: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "payable"
  >;

  whitelistedTokens: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  withdrawFee: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "nonpayable"
  >;

  withdrawOrgBalance: TypedContractMethod<
    [orgId: BigNumberish, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "FEE_ENABLED_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEE_EXEMPT_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEE_SETTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FEE_WITHDRAW_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REVOKE_CHARGE_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WHITELIST_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateFee"
  ): TypedContractMethod<
    [orgId: BigNumberish, token: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "exoticFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "feeExempt"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "feeReducer"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fees"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFeeBalance"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isFeeEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "orgBalances"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "restoreOrgChargeAbility"
  ): TypedContractMethod<[orgId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeOrgChargeAbility"
  ): TypedContractMethod<[orgId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokedOrgs"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "setExoticFee"
  ): TypedContractMethod<[newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFee"
  ): TypedContractMethod<
    [token: AddressLike, newFee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeEnabled"
  ): TypedContractMethod<[_isFeeEnabled: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeExempt"
  ): TypedContractMethod<
    [orgId: BigNumberish, isExempt: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFeeReducer"
  ): TypedContractMethod<[_feeReducer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWhitelistedToken"
  ): TypedContractMethod<
    [token: AddressLike, isWhitelisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferDirect"
  ): TypedContractMethod<
    [
      orgId: BigNumberish,
      from: AddressLike,
      token: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "whitelistedTokens"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawFee"
  ): TypedContractMethod<[token: AddressLike], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawOrgBalance"
  ): TypedContractMethod<
    [orgId: BigNumberish, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ExoticFeeSet"
  ): TypedContractEvent<
    ExoticFeeSetEvent.InputTuple,
    ExoticFeeSetEvent.OutputTuple,
    ExoticFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "FeeEnabled"
  ): TypedContractEvent<
    FeeEnabledEvent.InputTuple,
    FeeEnabledEvent.OutputTuple,
    FeeEnabledEvent.OutputObject
  >;
  getEvent(
    key: "FeeExemptSet"
  ): TypedContractEvent<
    FeeExemptSetEvent.InputTuple,
    FeeExemptSetEvent.OutputTuple,
    FeeExemptSetEvent.OutputObject
  >;
  getEvent(
    key: "FeeReducerSet"
  ): TypedContractEvent<
    FeeReducerSetEvent.InputTuple,
    FeeReducerSetEvent.OutputTuple,
    FeeReducerSetEvent.OutputObject
  >;
  getEvent(
    key: "FeeSet"
  ): TypedContractEvent<
    FeeSetEvent.InputTuple,
    FeeSetEvent.OutputTuple,
    FeeSetEvent.OutputObject
  >;
  getEvent(
    key: "FeeWithdraw"
  ): TypedContractEvent<
    FeeWithdrawEvent.InputTuple,
    FeeWithdrawEvent.OutputTuple,
    FeeWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "OrgBalanceWithdrawn"
  ): TypedContractEvent<
    OrgBalanceWithdrawnEvent.InputTuple,
    OrgBalanceWithdrawnEvent.OutputTuple,
    OrgBalanceWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OrgChargeAbilityUpdate"
  ): TypedContractEvent<
    OrgChargeAbilityUpdateEvent.InputTuple,
    OrgChargeAbilityUpdateEvent.OutputTuple,
    OrgChargeAbilityUpdateEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TransferAmount"
  ): TypedContractEvent<
    TransferAmountEvent.InputTuple,
    TransferAmountEvent.OutputTuple,
    TransferAmountEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistedTokenSet"
  ): TypedContractEvent<
    WhitelistedTokenSetEvent.InputTuple,
    WhitelistedTokenSetEvent.OutputTuple,
    WhitelistedTokenSetEvent.OutputObject
  >;

  filters: {
    "ExoticFeeSet(uint256)": TypedContractEvent<
      ExoticFeeSetEvent.InputTuple,
      ExoticFeeSetEvent.OutputTuple,
      ExoticFeeSetEvent.OutputObject
    >;
    ExoticFeeSet: TypedContractEvent<
      ExoticFeeSetEvent.InputTuple,
      ExoticFeeSetEvent.OutputTuple,
      ExoticFeeSetEvent.OutputObject
    >;

    "FeeEnabled(bool)": TypedContractEvent<
      FeeEnabledEvent.InputTuple,
      FeeEnabledEvent.OutputTuple,
      FeeEnabledEvent.OutputObject
    >;
    FeeEnabled: TypedContractEvent<
      FeeEnabledEvent.InputTuple,
      FeeEnabledEvent.OutputTuple,
      FeeEnabledEvent.OutputObject
    >;

    "FeeExemptSet(uint256,bool)": TypedContractEvent<
      FeeExemptSetEvent.InputTuple,
      FeeExemptSetEvent.OutputTuple,
      FeeExemptSetEvent.OutputObject
    >;
    FeeExemptSet: TypedContractEvent<
      FeeExemptSetEvent.InputTuple,
      FeeExemptSetEvent.OutputTuple,
      FeeExemptSetEvent.OutputObject
    >;

    "FeeReducerSet(address)": TypedContractEvent<
      FeeReducerSetEvent.InputTuple,
      FeeReducerSetEvent.OutputTuple,
      FeeReducerSetEvent.OutputObject
    >;
    FeeReducerSet: TypedContractEvent<
      FeeReducerSetEvent.InputTuple,
      FeeReducerSetEvent.OutputTuple,
      FeeReducerSetEvent.OutputObject
    >;

    "FeeSet(address,uint256)": TypedContractEvent<
      FeeSetEvent.InputTuple,
      FeeSetEvent.OutputTuple,
      FeeSetEvent.OutputObject
    >;
    FeeSet: TypedContractEvent<
      FeeSetEvent.InputTuple,
      FeeSetEvent.OutputTuple,
      FeeSetEvent.OutputObject
    >;

    "FeeWithdraw(address,uint256)": TypedContractEvent<
      FeeWithdrawEvent.InputTuple,
      FeeWithdrawEvent.OutputTuple,
      FeeWithdrawEvent.OutputObject
    >;
    FeeWithdraw: TypedContractEvent<
      FeeWithdrawEvent.InputTuple,
      FeeWithdrawEvent.OutputTuple,
      FeeWithdrawEvent.OutputObject
    >;

    "OrgBalanceWithdrawn(uint256,address,uint256)": TypedContractEvent<
      OrgBalanceWithdrawnEvent.InputTuple,
      OrgBalanceWithdrawnEvent.OutputTuple,
      OrgBalanceWithdrawnEvent.OutputObject
    >;
    OrgBalanceWithdrawn: TypedContractEvent<
      OrgBalanceWithdrawnEvent.InputTuple,
      OrgBalanceWithdrawnEvent.OutputTuple,
      OrgBalanceWithdrawnEvent.OutputObject
    >;

    "OrgChargeAbilityUpdate(uint256,bool)": TypedContractEvent<
      OrgChargeAbilityUpdateEvent.InputTuple,
      OrgChargeAbilityUpdateEvent.OutputTuple,
      OrgChargeAbilityUpdateEvent.OutputObject
    >;
    OrgChargeAbilityUpdate: TypedContractEvent<
      OrgChargeAbilityUpdateEvent.InputTuple,
      OrgChargeAbilityUpdateEvent.OutputTuple,
      OrgChargeAbilityUpdateEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TransferAmount(uint256,address,address,uint256,uint256)": TypedContractEvent<
      TransferAmountEvent.InputTuple,
      TransferAmountEvent.OutputTuple,
      TransferAmountEvent.OutputObject
    >;
    TransferAmount: TypedContractEvent<
      TransferAmountEvent.InputTuple,
      TransferAmountEvent.OutputTuple,
      TransferAmountEvent.OutputObject
    >;

    "WhitelistedTokenSet(address,bool)": TypedContractEvent<
      WhitelistedTokenSetEvent.InputTuple,
      WhitelistedTokenSetEvent.OutputTuple,
      WhitelistedTokenSetEvent.OutputObject
    >;
    WhitelistedTokenSet: TypedContractEvent<
      WhitelistedTokenSetEvent.InputTuple,
      WhitelistedTokenSetEvent.OutputTuple,
      WhitelistedTokenSetEvent.OutputObject
    >;
  };
}
