/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface OrganizationAdminInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAdmin"
      | "getAdmins"
      | "isAdmin"
      | "registry"
      | "removeAdmin"
      | "removeAllAdmins"
      | "supportsInterface"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "OrgAdminUpdate"): EventFragment;

  encodeFunctionData(
    functionFragment: "addAdmin",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdmins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isAdmin",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAdmin",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllAdmins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAdmins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
}

export namespace OrgAdminUpdateEvent {
  export type InputTuple = [
    orgId: BigNumberish,
    admin: AddressLike,
    status: boolean
  ];
  export type OutputTuple = [orgId: bigint, admin: string, status: boolean];
  export interface OutputObject {
    orgId: bigint;
    admin: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OrganizationAdmin extends BaseContract {
  connect(runner?: ContractRunner | null): OrganizationAdmin;
  waitForDeployment(): Promise<this>;

  interface: OrganizationAdminInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAdmin: TypedContractMethod<
    [organizationId: BigNumberish, admin: AddressLike],
    [void],
    "nonpayable"
  >;

  getAdmins: TypedContractMethod<
    [organizationId: BigNumberish],
    [string[]],
    "view"
  >;

  isAdmin: TypedContractMethod<
    [organizationId: BigNumberish, admin: AddressLike],
    [boolean],
    "view"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  removeAdmin: TypedContractMethod<
    [organizationId: BigNumberish, admin: AddressLike],
    [void],
    "nonpayable"
  >;

  removeAllAdmins: TypedContractMethod<
    [organizationId: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAdmin"
  ): TypedContractMethod<
    [organizationId: BigNumberish, admin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAdmins"
  ): TypedContractMethod<[organizationId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "isAdmin"
  ): TypedContractMethod<
    [organizationId: BigNumberish, admin: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeAdmin"
  ): TypedContractMethod<
    [organizationId: BigNumberish, admin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeAllAdmins"
  ): TypedContractMethod<[organizationId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;

  getEvent(
    key: "OrgAdminUpdate"
  ): TypedContractEvent<
    OrgAdminUpdateEvent.InputTuple,
    OrgAdminUpdateEvent.OutputTuple,
    OrgAdminUpdateEvent.OutputObject
  >;

  filters: {
    "OrgAdminUpdate(uint256,address,bool)": TypedContractEvent<
      OrgAdminUpdateEvent.InputTuple,
      OrgAdminUpdateEvent.OutputTuple,
      OrgAdminUpdateEvent.OutputObject
    >;
    OrgAdminUpdate: TypedContractEvent<
      OrgAdminUpdateEvent.InputTuple,
      OrgAdminUpdateEvent.OutputTuple,
      OrgAdminUpdateEvent.OutputObject
    >;
  };
}
