/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface PurchaseRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getPassProductIds"
      | "hasPassPurchasedProducts"
      | "isGiftingEnabled"
      | "isMintClosed"
      | "isWhitelist"
      | "maxMints"
      | "passMintCount"
      | "passOrganization"
      | "productMaxSupply"
      | "productSupply"
      | "recordProductPurchase"
      | "registry"
      | "setGiftingEnabled"
      | "setMaxMints"
      | "setMintClosed"
      | "setProductMaxSupply"
      | "setWhitelist"
      | "supportsInterface"
      | "totalPassMints"
      | "totalProductsSold"
      | "whitelistPassOwners"
      | "whitelisted"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "GiftingStatusChanged"
      | "MaxMintsUpdated"
      | "MintClosedStatusChanged"
      | "ProductMaxSupplyUpdated"
      | "WhitelistPassOwnerUpdated"
      | "WhitelistStatusChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getPassProductIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPassPurchasedProducts",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isGiftingEnabled",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isMintClosed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "passMintCount",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "passOrganization",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "productMaxSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "productSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordProductPurchase",
    values: [
      BigNumberish,
      BigNumberish,
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setGiftingEnabled",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMints",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMintClosed",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setProductMaxSupply",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelist",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPassMints",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalProductsSold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistPassOwners",
    values: [BigNumberish, AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelisted",
    values: [BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPassProductIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPassPurchasedProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isGiftingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isMintClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxMints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "passMintCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "passOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordProductPurchase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGiftingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMintClosed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProductMaxSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPassMints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalProductsSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistPassOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelisted",
    data: BytesLike
  ): Result;
}

export namespace GiftingStatusChangedEvent {
  export type InputTuple = [organizationId: BigNumberish, isGifting: boolean];
  export type OutputTuple = [organizationId: bigint, isGifting: boolean];
  export interface OutputObject {
    organizationId: bigint;
    isGifting: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaxMintsUpdatedEvent {
  export type InputTuple = [
    organizationId: BigNumberish,
    maxMints: BigNumberish
  ];
  export type OutputTuple = [organizationId: bigint, maxMints: bigint];
  export interface OutputObject {
    organizationId: bigint;
    maxMints: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintClosedStatusChangedEvent {
  export type InputTuple = [
    organizationId: BigNumberish,
    isMintClosed: boolean
  ];
  export type OutputTuple = [organizationId: bigint, isMintClosed: boolean];
  export interface OutputObject {
    organizationId: bigint;
    isMintClosed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductMaxSupplyUpdatedEvent {
  export type InputTuple = [
    organizationId: BigNumberish,
    productId: BigNumberish,
    maxSupply: BigNumberish
  ];
  export type OutputTuple = [
    organizationId: bigint,
    productId: bigint,
    maxSupply: bigint
  ];
  export interface OutputObject {
    organizationId: bigint;
    productId: bigint;
    maxSupply: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistPassOwnerUpdatedEvent {
  export type InputTuple = [
    organizationId: BigNumberish,
    passOwner: AddressLike,
    isWhitelisted: boolean
  ];
  export type OutputTuple = [
    organizationId: bigint,
    passOwner: string,
    isWhitelisted: boolean
  ];
  export interface OutputObject {
    organizationId: bigint;
    passOwner: string;
    isWhitelisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistStatusChangedEvent {
  export type InputTuple = [organizationId: BigNumberish, isWhitelist: boolean];
  export type OutputTuple = [organizationId: bigint, isWhitelist: boolean];
  export interface OutputObject {
    organizationId: bigint;
    isWhitelist: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PurchaseRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): PurchaseRegistry;
  waitForDeployment(): Promise<this>;

  interface: PurchaseRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getPassProductIds: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint[]],
    "view"
  >;

  hasPassPurchasedProducts: TypedContractMethod<
    [tokenId: BigNumberish, productIds: BigNumberish[]],
    [boolean],
    "view"
  >;

  isGiftingEnabled: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  isMintClosed: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  isWhitelist: TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;

  maxMints: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  passMintCount: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;

  passOrganization: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  productMaxSupply: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  productSupply: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  recordProductPurchase: TypedContractMethod<
    [
      _organizationId: BigNumberish,
      _passId: BigNumberish,
      _passOwner: AddressLike,
      _purchaser: AddressLike,
      _productIds: BigNumberish[],
      _pricingIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  setGiftingEnabled: TypedContractMethod<
    [organizationId: BigNumberish, _isGifting: boolean],
    [void],
    "nonpayable"
  >;

  setMaxMints: TypedContractMethod<
    [organizationId: BigNumberish, _maxMints: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMintClosed: TypedContractMethod<
    [organizationId: BigNumberish, _isMintClosed: boolean],
    [void],
    "nonpayable"
  >;

  setProductMaxSupply: TypedContractMethod<
    [
      organizationId: BigNumberish,
      productId: BigNumberish,
      _maxSupply: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setWhitelist: TypedContractMethod<
    [organizationId: BigNumberish, _isWhitelist: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalPassMints: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  totalProductsSold: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  whitelistPassOwners: TypedContractMethod<
    [
      organizationId: BigNumberish,
      _addresses: AddressLike[],
      _isWhitelisted: boolean[]
    ],
    [void],
    "nonpayable"
  >;

  whitelisted: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getPassProductIds"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "hasPassPurchasedProducts"
  ): TypedContractMethod<
    [tokenId: BigNumberish, productIds: BigNumberish[]],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isGiftingEnabled"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isMintClosed"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isWhitelist"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxMints"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "passMintCount"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "passOrganization"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "productMaxSupply"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "productSupply"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "recordProductPurchase"
  ): TypedContractMethod<
    [
      _organizationId: BigNumberish,
      _passId: BigNumberish,
      _passOwner: AddressLike,
      _purchaser: AddressLike,
      _productIds: BigNumberish[],
      _pricingIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setGiftingEnabled"
  ): TypedContractMethod<
    [organizationId: BigNumberish, _isGifting: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxMints"
  ): TypedContractMethod<
    [organizationId: BigNumberish, _maxMints: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMintClosed"
  ): TypedContractMethod<
    [organizationId: BigNumberish, _isMintClosed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProductMaxSupply"
  ): TypedContractMethod<
    [
      organizationId: BigNumberish,
      productId: BigNumberish,
      _maxSupply: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWhitelist"
  ): TypedContractMethod<
    [organizationId: BigNumberish, _isWhitelist: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalPassMints"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalProductsSold"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "whitelistPassOwners"
  ): TypedContractMethod<
    [
      organizationId: BigNumberish,
      _addresses: AddressLike[],
      _isWhitelisted: boolean[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelisted"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "GiftingStatusChanged"
  ): TypedContractEvent<
    GiftingStatusChangedEvent.InputTuple,
    GiftingStatusChangedEvent.OutputTuple,
    GiftingStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "MaxMintsUpdated"
  ): TypedContractEvent<
    MaxMintsUpdatedEvent.InputTuple,
    MaxMintsUpdatedEvent.OutputTuple,
    MaxMintsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MintClosedStatusChanged"
  ): TypedContractEvent<
    MintClosedStatusChangedEvent.InputTuple,
    MintClosedStatusChangedEvent.OutputTuple,
    MintClosedStatusChangedEvent.OutputObject
  >;
  getEvent(
    key: "ProductMaxSupplyUpdated"
  ): TypedContractEvent<
    ProductMaxSupplyUpdatedEvent.InputTuple,
    ProductMaxSupplyUpdatedEvent.OutputTuple,
    ProductMaxSupplyUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistPassOwnerUpdated"
  ): TypedContractEvent<
    WhitelistPassOwnerUpdatedEvent.InputTuple,
    WhitelistPassOwnerUpdatedEvent.OutputTuple,
    WhitelistPassOwnerUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistStatusChanged"
  ): TypedContractEvent<
    WhitelistStatusChangedEvent.InputTuple,
    WhitelistStatusChangedEvent.OutputTuple,
    WhitelistStatusChangedEvent.OutputObject
  >;

  filters: {
    "GiftingStatusChanged(uint256,bool)": TypedContractEvent<
      GiftingStatusChangedEvent.InputTuple,
      GiftingStatusChangedEvent.OutputTuple,
      GiftingStatusChangedEvent.OutputObject
    >;
    GiftingStatusChanged: TypedContractEvent<
      GiftingStatusChangedEvent.InputTuple,
      GiftingStatusChangedEvent.OutputTuple,
      GiftingStatusChangedEvent.OutputObject
    >;

    "MaxMintsUpdated(uint256,uint256)": TypedContractEvent<
      MaxMintsUpdatedEvent.InputTuple,
      MaxMintsUpdatedEvent.OutputTuple,
      MaxMintsUpdatedEvent.OutputObject
    >;
    MaxMintsUpdated: TypedContractEvent<
      MaxMintsUpdatedEvent.InputTuple,
      MaxMintsUpdatedEvent.OutputTuple,
      MaxMintsUpdatedEvent.OutputObject
    >;

    "MintClosedStatusChanged(uint256,bool)": TypedContractEvent<
      MintClosedStatusChangedEvent.InputTuple,
      MintClosedStatusChangedEvent.OutputTuple,
      MintClosedStatusChangedEvent.OutputObject
    >;
    MintClosedStatusChanged: TypedContractEvent<
      MintClosedStatusChangedEvent.InputTuple,
      MintClosedStatusChangedEvent.OutputTuple,
      MintClosedStatusChangedEvent.OutputObject
    >;

    "ProductMaxSupplyUpdated(uint256,uint256,uint256)": TypedContractEvent<
      ProductMaxSupplyUpdatedEvent.InputTuple,
      ProductMaxSupplyUpdatedEvent.OutputTuple,
      ProductMaxSupplyUpdatedEvent.OutputObject
    >;
    ProductMaxSupplyUpdated: TypedContractEvent<
      ProductMaxSupplyUpdatedEvent.InputTuple,
      ProductMaxSupplyUpdatedEvent.OutputTuple,
      ProductMaxSupplyUpdatedEvent.OutputObject
    >;

    "WhitelistPassOwnerUpdated(uint256,address,bool)": TypedContractEvent<
      WhitelistPassOwnerUpdatedEvent.InputTuple,
      WhitelistPassOwnerUpdatedEvent.OutputTuple,
      WhitelistPassOwnerUpdatedEvent.OutputObject
    >;
    WhitelistPassOwnerUpdated: TypedContractEvent<
      WhitelistPassOwnerUpdatedEvent.InputTuple,
      WhitelistPassOwnerUpdatedEvent.OutputTuple,
      WhitelistPassOwnerUpdatedEvent.OutputObject
    >;

    "WhitelistStatusChanged(uint256,bool)": TypedContractEvent<
      WhitelistStatusChangedEvent.InputTuple,
      WhitelistStatusChangedEvent.OutputTuple,
      WhitelistStatusChangedEvent.OutputObject
    >;
    WhitelistStatusChanged: TypedContractEvent<
      WhitelistStatusChangedEvent.InputTuple,
      WhitelistStatusChangedEvent.OutputTuple,
      WhitelistStatusChangedEvent.OutputObject
    >;
  };
}
